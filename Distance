# Script donnees geo : il fonctionne sans aucune donnees a ajouter
# libraries nécessaires : installer si necessaire
library(data.table)
library(ggmap)
library(dplyr)
library(maps)
#source les nom des villes (anglais)
Ville_monde <- data.table(world.cities)
# filtre les pays européens 
Eu <- rbind("Belgium","Bulgaria","Czech Republic","Denmark","Germany","Estonia","Hungary","Greece","Spain","France","Croatia","Italy","Cyprus","Latvia","Lithuania","Luxembourg","Malta","Netherlands","Austria","Poland","Portugal","Romania","Slovenia","Slovakia","Finland","Sweden","UK","Norway")
Eu<-data.frame(Eu) 
Ville_europe <- merge(x= Ville_monde, y=Eu, by.x="country.etc",by.y="Eu", all= FALSE)

#donne un rang et garde les 5 premières (pour capter les petits pays)
Ville_europe$rank <- ave(-Ville_europe$pop, Ville_europe$country.etc,FUN=rank)
Ville_europe <- filter(Ville_europe, rank <=5)

#pour generer les couples de villes
x <- list()
for(i in Ville_europe$name){
  x[[i]]<- data.frame(rep(i, times= nrow(Ville_europe)),Ville_europe$name,Ville_europe$country.etc)
  message("...ecrit la ligne", i)
}
TableVille_Europe <- rbindlist(x)

#pour cleaner on supprime les objets inutiles
rm(x,i,Eu)

#on renomme et supprime les variables inutiles
TableVille_Europe$From <- TableVille_Europe$rep.i..times...nrow.Ville_europe..
TableVille_Europe$To <- TableVille_Europe$Ville_europe.name
TableVille_Europe$rep.i..times...nrow.Ville_europe..<- NULL
TableVille_Europe$Ville_europe.name <- NULL

#on ajoute les pays pour les origines / destinations
 x <- data.frame(Ville_europe$country.etc,Ville_europe$name, stringsAsFactors = FALSE)
 TableVille_Europe <- merge(x=TableVille_Europe,y=x,by.x = "From",by.y = "Ville_europe.name",all=FALSE,suffixes = c(".to",".from"),stringsAsFactors = FALSE)
 
 #on clean la table finale
TableVille_Europe$Country.To <- as.character(TableVille_Europe$Ville_europe.country.etc.to )
TableVille_Europe$Country.from <- as.character(TableVille_Europe$Ville_europe.country.etc.from )
TableVille_Europe$Ville_europe.country.etc.from <- NULL
TableVille_Europe$Ville_europe.country.etc.to <-NULL
TableVille_Europe$To <- as.character(TableVille_Europe$To)


##### Utilisation de l'API Google######
# les donnees sont déja en bon format

x <-list()
for(i in 1:25499{
from<- c(TableVille_Europe$From[i])
to <- c(TableVille_Europe$to[i])
x[[i]]<-mapdist(from,to,output = c("simple"),mode = c("driving"))
message("Traite la ligne",i)
}
Tabledistance <- rbindlist(x)
distQueryCheck()


#ensuite il faudra merger les villes par pays (fois 2) puis agregate par couple ij
